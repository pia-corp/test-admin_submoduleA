# =====================================================================
# PageSpeed Insights 自動チェックワークフロー
# =====================================================================
# 概要:
# このワークフローは、プルリクエスト時に以下の処理を自動的に実行します:
# 1. コードのチェックアウトと環境設定
# 2. HTMLファイルの整形（lint）
# 3. 開発サーバーへのファイルデプロイ
# 4. リンク切れのチェック
# 5. 変更されたHTMLファイルに対するPageSpeed Insightsによるパフォーマンス分析
# 6. 結果のPRへのコメント投稿
#
# フロー:
# プルリクエスト作成/更新 → コードチェックアウト → 依存関係インストール →
# lint実行 → SSHキー設定 → ファイルデプロイ → リンクチェック →
# HTML差分抽出 → PSIチェック → 結果投稿
#
# 注意事項:
# - このワークフローは`develop/`ブランチへのPRに対してのみ実行されます
# - SSH接続のための秘密鍵はGitHubシークレットから取得します
# - PSI APIキーはGitHubシークレットに設定する必要があります
# - 処理時間制限は30分です
# =====================================================================

name: PageSpeed Insights 分析

on:
  pull_request:
    branches:
      - 'main'
    types: [opened, reopened, synchronize]

# プルリクエストで起動するワークフローは、最新コード以外での実行がたいてい不要です。
# 自動テストや静的解析はその典型で、古いコードで実行されるワークフローはムダです。
# そこで次のように実装し、古いワークフローは自動キャンセルしましょう。
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  page_speed_analysis:
    name: デプロイとパフォーマンス分析
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read # コードの読み込みを許可

    if: startsWith(github.head_ref, 'develop')

    # =============================
    # 環境変数の設定
    # - GitHub変数から環境設定を取得
    # - 出力値の定義
    # =============================
    outputs:
      html_files: ${{ steps.extract_html_diff.outputs.html_files }}
      html_count: ${{ steps.extract_html_diff.outputs.html_count }}

    env:
      # 接続情報
      SERVER_HOST: ${{ vars.DEVELOPMENT_HOST }}
      SERVER_PORT: ${{ vars.DEVELOPMENT_PORT }}
      SERVER_USER: ${{ vars.DEVELOPMENT_USER_NAME }}

      # パス設定
      LOCAL_PATH: ${{ vars.LOCAL_PATH }}
      REMOTE_BASE_PATH: ${{ vars.DEVELOPMENT_REMOTE_PATH }}
      REMOTE_PROJECT_PATH: ${{ vars.DEVELOPMENT_REMOTE_PATH }}/${{ github.event.repository.name }}

      # デプロイ設定
      SYNC_MODE: "full"
      TARGET_REPOSITORY: ${{ github.event.repository.name }}
      TARGET_ENVIRONMENT: "検証環境"

    steps:
      # =============================
      # 基本設定
      # =============================
      - name: リポジトリをチェックアウト
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Node.js環境をセットアップ
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e
        with:
          node-version: 'latest'

      - name: npm依存関係をキャッシュ
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 依存関係をインストール
        run: npm ci

      # - name: マークアップリント
      #   run: npm run linter

      # # =============================
      # # SSH設定とデプロイ
      # # =============================
      # - name: SSH秘密鍵を設定
      #   run: |
      #     # SSHディレクトリが存在しない場合は作成
      #     if [ ! -d "~/.ssh" ]; then
      #       mkdir -p ~/.ssh
      #     fi

      #     # 秘密鍵を設定
      #     echo "${{ secrets.DEVELOPMENT_SSH_KEY }}" > ~/.ssh/id_rsa.enc
      #     echo "${{ secrets.SSH_PASSPHRASE }}" | openssl rsa -in ~/.ssh/id_rsa.enc -out ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa

      #     # SSH設定を作成
      #     echo -e "Host ${{ env.SERVER_HOST }}\n  User ${{ env.SERVER_USER }}\n  Port ${{ env.SERVER_PORT }}\n  IdentityFile ~/.ssh/id_rsa\n" > ~/.ssh/config

      #     # リモートディレクトリを作成
      #     ssh -v -p ${{ env.SERVER_PORT }} -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p ${{ env.REMOTE_PROJECT_PATH }}"

      # - name: 検証環境へファイルをデプロイ
      #   uses: milanmk/actions-file-deployer@1.16
      #   with:
      #     remote-protocol: 'sftp'
      #     remote-host: ${{ env.SERVER_HOST }}
      #     remote-port: ${{ env.SERVER_PORT }}
      #     remote-user: ${{ env.SERVER_USER }}
      #     ssh-private-key: ~/.ssh/id_rsa
      #     local-path: ${{ env.LOCAL_PATH }}
      #     remote-path: ${{ env.REMOTE_PROJECT_PATH }}
      #     sync: ${{ env.SYNC_MODE }}
      #     debug: false

      # =============================
      # リンクチェック
      # =============================
  # check-links:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '16'

  #     - name: Install dependencies
  #       run: npm install broken-link-checker cheerio undici stream-web

  #     - name: Check for broken links
  #       id: blc
  #       run: |
  #         node .github/actions/link-checker.js
  #         if grep -q "| " broken_links_result.md; then
  #           echo "found_broken_links=true" >> $GITHUB_OUTPUT
  #         else
  #           echo "found_broken_links=false" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Comment on PR
  #       if: steps.blc.outputs.found_broken_links == 'true'
  #       uses: actions/github-script@v6
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const fs = require('fs');
  #           const brokenLinksContent = fs.readFileSync('broken_links_result.md', 'utf8');

  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: `## 🔍 リンク切れが検出されました\n\n${brokenLinksContent}\n\nこれらのリンクを修正してください。`
  #           });





      # =============================
      # HTML変更ファイル抽出
      # =============================
      - name: 変更されたHTMLファイルを抽出
        id: extract_html_diff
        run: |
          # mainブランチと比較するためにfetch
          git fetch origin || true

          # HTMLファイルのみを抽出（public配下のみ）
          HTML_FILES=$(git diff --name-only origin/main HEAD | grep -E 'public/.*\.html$' | sed 's#^public/##g' | tr '\n' ',' || echo "")

          # 末尾のカンマを削除
          HTML_FILES=${HTML_FILES%,}

          # 結果の処理
          if [ -n "$HTML_FILES" ]; then
            HTML_COUNT=$(echo "$HTML_FILES" | awk -F',' '{print NF}')
            echo `変更されたHTMLファイル: $HTML_FILES`
          else
            echo "変更されたHTMLファイルはありません"
            HTML_FILES=""
            HTML_COUNT=0
          fi

          # 出力を設定
          echo "html_files=${HTML_FILES}" >> $GITHUB_OUTPUT
          echo "html_count=${HTML_COUNT}" >> $GITHUB_OUTPUT

      # =============================
      # PageSpeed Insights分析
      # =============================
      - name: PageSpeed Insights分析を実行
        env:
          PSI_API_KEY: ${{ secrets.PSI_API_KEY }}
          BASE_URL: "https://piapiapia.xsrv.jp/dev/${{ github.event.repository.name }}"
          HTML_FILES: ${{ steps.extract_html_diff.outputs.html_files }}
        id: psi_check
        run: |
          echo "分析対象ファイル: ${{ steps.extract_html_diff.outputs.html_files }}"
          RESULT=$(node .github/actions/psi)
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: PSI分析結果をPRにコメント
        uses: actions/github-script@v7.0.1
        if: ${{ steps.psi_check.outcome == 'success' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = `${{ steps.psi_check.outputs.result }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: result
            });
