name: CI

on:
  pull_request:
    branches:
      - 'main'
    types: [opened, reopened, synchronize]

# 同じPRで複数のワークフローが実行されないようにする設定
# 新しいコミットがプッシュされた場合、進行中の古いワークフローは自動的にキャンセルされる
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  # =============================
  # HTMLファイルに対してmarkuplintによる静的解析を実行し、コードの品質を検証します。
  # =============================
  html-linter:
    name: HTMLマークアップリンター
    # 実行条件：
    # - ベースブランチがmain
    # - 実行者がdependabotではない
    # - ヘッドブランチ名がdevelopで始まる
    if: always() && github.base_ref == 'main' && github.actor != 'dependabot[bot]' && startsWith(github.head_ref, 'develop')

    runs-on: ubuntu-latest
    # 実行時間が3分を超えた場合、ワークフローを強制終了
    timeout-minutes: 3
    # 必要な権限のみを付与
    permissions:
      contents: read         # リポジトリコンテンツの読み取り権限
      pull-requests: write   # PRへのコメント投稿権限

    steps:
      # リポジトリのコードをチェックアウト
      - name: リポジトリをチェックアウト
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false  # 不要な認証情報を保持しない

      # Node.js環境のセットアップ
      - name: Node.jsセットアップ
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version: 'latest'  # 最新のNode.jsバージョンを使用

      # 依存関係をインストール
      - name: Install dependencies
        run: npm ci

      - name: Run markuplint # markuplintを実行し、結果をJSONファイルに出力
        id: run-markuplint
        # publicフォルダ内のhtmlファイルを対象とする (--format jsonでJSON形式出力)
        # 問題があってもワークフローを続行させるために continue-on-error: true を設定
        run: |
          npx markuplint public/**/*.html --locale ja --format json > markuplint-results.json || true
        continue-on-error: true # lintエラーでジョブが失敗しないようにする

      - name: Dump markuplint results # デバッグ用ステップ
        run: |
          echo "--- markuplint-results.json content ---"
          cat markuplint-results.json || echo "markuplint-results.json not found or empty"
          echo "--- end of content ---"

      - name: Create Comment Body # コメント内容を作成
        id: create-comment
        # markuplintのステップが成功したか、またはエラーがあっても続行された場合に実行
        if: steps.run-markuplint.outcome == 'success' || steps.run-markuplint.outcome == 'failure'
        run: |
          # ファイルが存在し、空でないことを確認
          if [ ! -s markuplint-results.json ]; then
            echo "markuplint-results.json is empty or not found. Assuming no violations."
            echo "COMMENT_BODY=No markuplint violations found or analysis could not be run." >> $GITHUB_ENV
            exit 0
          fi

          results=$(cat markuplint-results.json)

          # results が有効なJSONかチェック
          if ! echo "$results" | jq empty > /dev/null 2>&1; then
            echo "Error: markuplint-results.json does not contain valid JSON."
            echo "Output:"
            cat markuplint-results.json
            echo "COMMENT_BODY=Error processing markuplint results (invalid JSON)." >> $GITHUB_ENV
            exit 0 # または exit 1
          fi

          # 結果が配列なので、jq '.' で直接配列を取得する
          violations_array=$(echo "$results" | jq '.')

          # 配列形式でない場合のエラーチェック (念のため)
          if [ "$violations_array" == "null" ] || ! echo "$violations_array" | jq 'type == "array"' | grep -q true; then
              echo "Error: Could not extract violations array from markuplint results."
              echo "Result content:"
              cat markuplint-results.json
              echo "COMMENT_BODY=Error processing markuplint results (unexpected format)." >> $GITHUB_ENV
              exit 0 # または exit 1
          fi

          if [ "$(echo "$violations_array" | jq 'length')" -eq 0 ]; then
            echo "No violations found."
            echo "COMMENT_BODY=No markuplint violations found." >> $GITHUB_ENV
          else
            echo "Violations found. Generating comment..."
            # jq で各違反をテーブル行に変換
            table_rows=$(echo "$violations_array" | jq -r '
              map("| \(.line // "?"):\(.col // "?") | `\(.filePath // "N/A" | sub(".*/public/"; ""))` | `\(.ruleId // "N/A")` | \(.message // "N/A" | gsub("\\|"; "\\\\|")) |") | .[]'
            )

            # --- ここを修正 ---
            # 中間の comment_body 変数を使わず、直接 GITHUB_ENV に書き込む
            echo 'COMMENT_BODY<<EOF' >> $GITHUB_ENV
            echo "### :warning: Markuplint Violations Found" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV # Markdownの表示のために空行を追加
            echo "| Line | File | Rule | Message |" >> $GITHUB_ENV
            echo "|------|------|------|---------|" >> $GITHUB_ENV
            # jq で生成したテーブル行を書き込む
            echo "${table_rows}" >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            # --- 修正ここまで ---
          fi

      - name: プルリクエストにコメントを投稿
        # コメント内容が存在し、かつ "No violations found." でない場合のみ実行
        if: env.COMMENT_BODY != '' && env.COMMENT_BODY != 'No markuplint violations found.'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = process.env.COMMENT_BODY;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number, // プルリクエストの番号
              body: commentBody
            });

  # =============================
  # リポジトリ内のHTMLファイルのリンク切れをチェックします。見つかったリンク切れはプルリクエストのコメントとして報告されます。
  # =============================
  check-links:
    needs: html-linter
    if: always() && github.base_ref == 'main' && github.actor != 'dependabot[bot]' && startsWith(github.head_ref, 'develop')

    name: リンク切れチェック
    runs-on: ubuntu-latest
    # 実行時間が5分を超えた場合、ワークフローを強制終了
    timeout-minutes: 5
    # 必要な権限のみを付与
    permissions:
      contents: read         # リポジトリコンテンツの読み取り権限
      pull-requests: write   # PRへのコメント投稿権限

    # =============================
    # 環境変数の設定
    # - イベントタイプに応じて異なるソースから値を取得
    # - 必要に応じてデフォルト値を設定
    # =============================
    env:
      REPOSITORY_NAME: ${{ github.event.repository.name }}

    steps:
      # リポジトリのコードをチェックアウト
      - name: リポジトリをチェックアウト
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false  # 不要な認証情報を保持しない

      # Node.js環境のセットアップ
      - name: Node.jsセットアップ
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version: 'latest'  # 最新のNode.jsバージョンを使用

      # 依存関係をインストール
      - name: Install dependencies
        run: npm ci

      # ローカルHTTPサーバーを起動（リンクチェックのため）
      - name: Start local server
        run: |
          npx http-server ./public -p 8081 &
          sleep 5

      # リンクチェッカースクリプトを実行
      - name: Run link checker
        id: link-checker
        run: |
          cp .github/actions/link-checker.js .
          node link-checker.js

      # 見つかったリンク切れをPRにコメント
      - name: Post broken links to PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const errorsArray = ${{ steps.link-checker.outputs.errors }}

            // エラーメッセージを整形
            let message = "";
            for (let key in errorsArray) {
              for (let i = 0, len = errorsArray[key].length; i < len; i++) {
                message += `| ${key} | ${errorsArray[key][i]} |\n`;
              }
            }

            const comment = `
              ## リンク切れレポート
              | ファイル名 | リンク切れパス |
              | :-- | :-- |
              ${message}

              ## 注意
              ・リンク切れは最大100件まで表示されます。
            `;
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # =============================
  # 検証環境へアップロードしたURLでPSIを実行し、パフォーマンス分析を行います。
  # =============================
  page_speed_analysis:
    needs: check-links
    if: always() && github.base_ref == 'main' && github.actor != 'dependabot[bot]' && startsWith(github.head_ref, 'develop')
    name: パフォーマンス分析
    runs-on: ubuntu-latest
    # 実行時間が30分を超えた場合、ワークフローを強制終了
    timeout-minutes: 30
    permissions:
      contents: read         # リポジトリコンテンツの読み取り権限
      pull-requests: write   # PRへのコメント投稿権限

    # =============================
    # 環境変数の設定
    # - GitHub変数から環境設定を取得
    # - 出力値の定義
    # =============================
    outputs:
      html_files: ${{ steps.extract_html_diff.outputs.html_files }}
      html_count: ${{ steps.extract_html_diff.outputs.html_count }}

    env:
      # 接続情報
      DEV_SERVER_HOST: ${{ vars.DEVELOPMENT_HOST }}
      DEV_SERVER_PORT: ${{ vars.DEVELOPMENT_PORT }}
      DEV_SERVER_USER: ${{ vars.DEVELOPMENT_USER_NAME }}

      # パス設定
      LOCAL_SOURCE_PATH: ${{ vars.LOCAL_PATH }}
      REMOTE_PROJECT_PATH: ${{ vars.DEVELOPMENT_REMOTE_PATH }}/${{ github.event.repository.name }}

      # デプロイ設定
      SYNC_MODE: ${{ vars.SYNC_MODE || 'full' }}

    steps:
      # リポジトリのコードをチェックアウト
      - name: リポジトリをチェックアウト
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false  # 不要な認証情報を保持しない

      - name: SSH接続の設定
        run: |
          # SSHディレクトリの準備
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # セキュリティ強化：環境変数の事前バリデーション - インジェクション攻撃対策
          # ホスト名のバリデーション（厳格なパターンのみ許可）
          if ! [[ "${{ env.DEV_SERVER_HOST }}" =~ ^[a-zA-Z0-9][a-zA-Z0-9.-]{0,61}[a-zA-Z0-9](\.[a-zA-Z]{2,})+$ ]]; then
            echo "エラー: 無効なサーバーホスト名が指定されています" >&2
            exit 1
          fi
          VALIDATED_HOST="${{ env.DEV_SERVER_HOST }}"

          # ポート番号のバリデーション（数値のみ、範囲チェック）
          if ! [[ "${{ env.DEV_SERVER_PORT }}" =~ ^[0-9]+$ ]] || \
            [ "${{ env.DEV_SERVER_PORT }}" -lt 1 ] || \
            [ "${{ env.DEV_SERVER_PORT }}" -gt 65535 ]; then
            echo "エラー: 無効なポート番号が指定されています" >&2
            exit 1
          fi
          VALIDATED_PORT="${{ env.DEV_SERVER_PORT }}"

          # ユーザー名のバリデーション（英数字とアンダースコアのみ）
          if ! [[ "${{ env.DEV_SERVER_USER }}" =~ ^[a-zA-Z0-9_]+$ ]]; then
            echo "エラー: 無効なユーザー名が指定されています" >&2
            exit 1
          fi
          VALIDATED_USER="${{ env.DEV_SERVER_USER }}"

          # プロジェクトパスのバリデーション（安全な文字のみ）
          SANITIZED_PATH=$(echo "${{ env.REMOTE_PROJECT_PATH }}" | sed 's/[^a-zA-Z0-9_/-]//g')
          # 追加チェック - 空文字列やディレクトリトラバーサルの防止
          if [ -z "$SANITIZED_PATH" ] || [[ "$SANITIZED_PATH" == *".."* ]]; then
            echo "エラー: 無効なプロジェクトパスが指定されています" >&2
            exit 1
          fi

          # 秘密鍵のセットアップ
          echo "${{ secrets.DEVELOPMENT_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # SSH設定ファイルの作成 - ヒアドキュメントの代わりに複数のechoを使用
          echo "Host ${VALIDATED_HOST}" > ~/.ssh/config
          echo "  User ${VALIDATED_USER}" >> ~/.ssh/config
          echo "  Port ${VALIDATED_PORT}" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

          # SSHコマンドの安全な構築 - 引数の分離とクォートに注意
          ssh -p "${VALIDATED_PORT}" \
              -o StrictHostKeyChecking=no \
              -i ~/.ssh/id_rsa \
              "${VALIDATED_USER}@${VALIDATED_HOST}" \
              "mkdir -p '${SANITIZED_PATH}'"

      # デプロイ処理
      - name: 検証環境へファイルをデプロイ
        uses: milanmk/actions-file-deployer@3cf188f493103b5f12f11221186f8fbd07f2be10 # 1.16
        with:
          remote-protocol: 'sftp'
          remote-host: ${{ env.DEV_SERVER_HOST }}
          remote-port: ${{ env.DEV_SERVER_PORT }}
          remote-user: ${{ env.DEV_SERVER_USER }}
          ssh-private-key: ~/.ssh/id_rsa
          local-path: ${{ env.LOCAL_SOURCE_PATH }}
          remote-path: ${{ env.REMOTE_PROJECT_PATH }}
          sync: ${{ env.SYNC_MODE }}
          debug: false

      # 変更ファイル分析
      - name: 変更されたHTMLファイルを抽出
        id: extract_html_diff
        run: |
          # mainブランチと比較するためにfetch
          git fetch origin main || echo "mainブランチの取得に失敗しました。新規リポジトリの場合は無視できます。"

          # publicディレクトリ配下のHTMLファイルのみを抽出
          HTML_FILES=$(git diff --name-only origin/main HEAD | grep -E 'public/.*\.html$' | sed 's#^public/##g' | tr '\n' ',' || echo "")

          # 末尾のカンマを削除
          HTML_FILES=${HTML_FILES%,}

          # 結果の処理
          if [ -n "$HTML_FILES" ]; then
            HTML_COUNT=$(echo "$HTML_FILES" | awk -F',' '{print NF}')
            echo "変更されたHTMLファイル: $HTML_FILES (合計: $HTML_COUNT件)"
          else
            echo "変更されたHTMLファイルはありません"
            HTML_FILES=""
            HTML_COUNT=0
          fi

          # GitHub Actions出力を設定
          echo "html_files=${HTML_FILES}" >> $GITHUB_OUTPUT
          echo "html_count=${HTML_COUNT}" >> $GITHUB_OUTPUT

      # パフォーマンス分析
      - name: PageSpeed Insights分析を実行
        if: ${{ steps.extract_html_diff.outputs.html_count != '0' }}
        env:
          PSI_API_KEY: ${{ secrets.PSI_API_KEY }}
          BASE_URL: "https://piapiapia.xsrv.jp/dev/${{ github.event.repository.name }}"
          HTML_FILES: ${{ steps.extract_html_diff.outputs.html_files }}
        id: psi_analysis
        run: |
          echo "分析対象ファイル: ${{ steps.extract_html_diff.outputs.html_files }}"
          RESULT=$(node .github/actions/psi)
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 結果の報告
      - name: PSI分析結果をPRにコメント
        if: ${{ steps.extract_html_diff.outputs.html_count != '0' && steps.psi_analysis.outcome == 'success' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = `${{ steps.psi_analysis.outputs.result }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: result
            });

  create-release-tag:
    if: always() && github.base_ref == 'main' && github.actor != 'dependabot[bot]' && startsWith(github.head_ref, 'develop')
    needs: page_speed_analysis
    runs-on: ubuntu-latest
    timeout-minutes: 3
    permissions:
      contents: write

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 前回のリリースタグを取得する
        id: fetch_previous_tag
        run: |
          echo "pre_tag=$(curl -H 'Accept: application/vnd.github.v3+json' -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)" >> $GITHUB_OUTPUT

      - name: タグを生成する 「{YYYY.MM.DD}-{異なる日のリリース回数}.{当日リリース回数}」
        id: generate_release_tag
        run: |
          today=$(date +'%Y.%m.%d')
          pre_release_date=$(echo ${{ steps.fetch_previous_tag.outputs.pre_tag }} | awk -F'-' '{print $1}')
          pre_release_count=$(echo ${{ steps.fetch_previous_tag.outputs.pre_tag }} | awk -F'-' '{print $2}')
          if [[ ! $pre_release_date = $today ]]; then
            pre_release_count=0
          fi
          echo "release_tag=$today-$(($pre_release_count + 1))" >> $GITHUB_OUTPUT

      - name: PRのDescriptionを取得しマークダウン形式に変換する
        id: fetch_pr_description
        run: |
          echo "pr_description=$(curl -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            'https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number}}' \
            | jq .body | awk '{if ($0 == "null") print ""; else print}')" >> $GITHUB_OUTPUT

      - name: 前回リリースからの差分をもとに、変更点を取得する
        id: generate_changes
        run: |
          echo "changes=$(
          curl -X POST \
            -H 'Accept: application/vnd.github.v3+json' \
            -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            https://api.github.com/repos/${{ github.repository }}/releases/generate-notes \
            -d '{
              "tag_name": "${{ steps.generate_release_tag.outputs.release_tag }}",
              "previous_tag_name": "${{ steps.fetch_previous_tag.outputs.pre_tag }}",
              "target_commitish": "main"
            }' | jq .body
          )" >> $GITHUB_OUTPUT

      - name: リリースノートの本文を作成する
        id: prepare_release_note
        run: |
          echo "release_note_body=$(echo \
            ${{ steps.fetch_pr_description.outputs.pr_description }} \
            ${{ steps.generate_changes.outputs.changes }} \
            | sed 's/\\"//g' | sed 's/["“]//g')" >> $GITHUB_OUTPUT

      - name: タグを切り、リリースノートを作成する
        run: |
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{ \
              \"tag_name\": \"${{ steps.generate_release_tag.outputs.release_tag }}\", \
              \"target_commitish\": \"main\", \
              \"name\": \"${{ steps.generate_release_tag.outputs.release_tag }}\", \
              \"body\": \"${{ steps.prepare_release_note.outputs.release_note_body }}\" \
            }" \
            -w "%{http_code}" \
            -o response_body.txt \
            https://api.github.com/repos/${{ github.repository }}/releases)
            status_code=$(tail -n1 <<< "$response")
            echo "Status Code: $status_code"
            body=$(cat response_body.txt)
            echo "Response Body: $body"
            if [ $status_code -ne 201 ]; then
              echo "::error:: リリースの作成に失敗しました。"
              exit 1
            fi
