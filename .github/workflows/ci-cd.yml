name: PageSpeed Insights Check
on:
  pull_request:
    branches:
      - main
    types: [opened, edited, reopened, synchronize]

jobs:
  extract-diff-and-deploy:
    name: Extract Changes and Deploy
    runs-on: ubuntu-latest
    outputs:
      html_files: ${{ steps.extract_html_diff.outputs.html_files }}
      html_count: ${{ steps.extract_html_diff.outputs.html_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Extract HTML file differences
        id: extract_html_diff
        run: |
          git fetch origin || true
          # HTMLファイルのみを抽出
          HTML_FILES=$(git diff --name-only origin/main HEAD | grep -E 'public/.*\.html$' | sed 's#^public/##g' | tr '\n' ',' || echo "")

          # 末尾のカンマを削除
          HTML_FILES=${HTML_FILES%,}

          # ファイルがある場合、改行をカンマに変換
          if [ -n "$HTML_FILES" ]; then
            HTML_FILES=$(echo "$HTML_FILES" | tr '\n' ',')
            HTML_COUNT=$(echo "$HTML_FILES" | awk -F',' '{print NF}')
          else
            echo "No HTML files changed"
            HTML_FILES=""
            HTML_COUNT=0
          fi

          echo "HTML files changed: $HTML_FILES"
          echo "html_files=${HTML_FILES}" >> $GITHUB_OUTPUT
          echo "html_count=${HTML_COUNT}" >> $GITHUB_OUTPUT

      - name: Install lftp
        run: sudo apt-get install -y lftp
        if: steps.extract_html_diff.outputs.html_files != ''

      - name: Set REMOTE path
        run: echo "REMOTE=$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2)" >> $GITHUB_ENV


      - name: Upload changed files with LFTP
        if: steps.extract_html_diff.outputs.html_files != ''
        env:
          FTP_HOST: "${{ vars.DEVELOPMENT_HOST }}"
          FTP_USER: "${{ vars.DEVELOPMENT_USER_NAME }}"
          FTP_PASSWORD: "${{ secrets.DEVELOPMENT_PASSWORD }}"
          LOCAL: "./public"
        run: |
          # 変更されたファイルのリストを取得
          IFS=',' read -ra HTML_FILES <<< "${{ steps.extract_html_diff.outputs.html_files }}"

          # lftp構成ファイルを作成
          echo "set ssl:verify-certificate no" > ~/.lftprc
          echo "set net:timeout 10" >> ~/.lftprc
          echo "set net:max-retries 3" >> ~/.lftprc
          echo "set net:reconnect-interval-base 5" >> ~/.lftprc

          # lftp接続と各ファイルのアップロード
          lftp -c "
            open -u $FTP_USER,$FTP_PASSWORD $FTP_HOST
            lcd $LOCAL
            cd ${{ env.REMOTE }}

            # 変更されたファイルを1つずつアップロード
            $(for file in "${HTML_FILES[@]}"; do
              echo "put -O $(dirname "$file") \"$file\""
            done)

            bye
          "

          echo "Successfully uploaded ${#HTML_FILES[@]} files to ${{ env.REMOTE }}"

  # check_psi:
  #   needs: extract-diff-and-deploy
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   if: ${{ needs.extract-diff-and-deploy.outputs.html_count > 0 }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-node@v4.2.0
  #       with:
  #         node-version: 'latest'

  #     - name: Check PSI
  #       env:
  #         PSI_API_KEY: ${{ secrets.PSI_API_KEY }}
  #         BASE_URL: "${{ vars.DEVELOPMENT_REMOTE_PATH }}/${{ github.repository }}/}"
  #         HTML_FILES: ${{ needs.extract-diff-and-deploy.outputs.html_files }}
  #       id: psi_check
  #       run: |
  #         echo "HTML_FILES: ${{ needs.extract-diff-and-deploy.outputs.html_files }}"
  #         RESULT=$(node .github/actions/psi)
  #         echo "result<<EOF" >> $GITHUB_OUTPUT
  #         echo "$RESULT" >> $GITHUB_OUTPUT
  #         echo "EOF" >> $GITHUB_OUTPUT

  #     - name: Comment PR with PSI results
  #       uses: actions/github-script@v7.0.1
  #       if: ${{ steps.psi_check.outcome == 'success' }}
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const result = `${{ steps.psi_check.outputs.result }}`;
  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: result
  #           });
