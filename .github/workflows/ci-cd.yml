# name: CI/CD Pipeline

# on:
#   pull_request:
#     branches:
#       - main
#     types: [opened, edited, reopened, synchronize]

# jobs:
#   lint:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: 'latest'

#     - name: Cache npm dependencies
#       uses: actions/cache@v3
#       with:
#         path: ~/.npm
#         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#         restore-keys: |
#           ${{ runner.os }}-node-

#     - name: Install dependencies
#       run: npm ci

#     - name: Lint and rewrite markup
#       run: npm run linter

#   check_links:
#     runs-on: ubuntu-latest
#     needs: lint

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 'latest'

#       - name: Cache npm dependencies
#         uses: actions/cache@v3
#         with:
#           path: ~/.npm
#           key: ${{ runner.os }}-node-link-checker-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-node-link-checker-
#             ${{ runner.os }}-node-

#       - name: Install dependencies
#         run: npm ci

#       - name: Cache http-server output
#         uses: actions/cache@v3
#         with:
#           path: ./.http-server-cache
#           key: ${{ runner.os }}-http-server-${{ github.sha }}
#           restore-keys: |
#             ${{ runner.os }}-http-server-

#       - name: Create cache directory if it doesn't exist
#         run: mkdir -p ./.http-server-cache

#       - name: Start local server
#         run: |
#           npx http-server ./public -p 8081 --cache ./.http-server-cache &
#           sleep 5

#       - name: Run link checker
#         id: link-checker
#         run: node link-checker.js

#       - name: Post broken links to PR
#         uses: actions/github-script@v6
#         with:
#           script: |
#             const errorsArray = ${{ steps.link-checker.outputs.errors }}

#             let message = "";
#             for (let key in errorsArray) {
#               for (let i = 0, len = errorsArray[key].length; i < len; i++) {
#                 message += `| ${key} | ${errorsArray[key][i]} |\n`;
#               }
#             }

#             const comment = `
#               ## Broken Links Report
#               | ファイル名 | リンク切れパス |
#               | :-- | :-- |
#               ${message}
#             `;
#             github.rest.issues.createComment({
#               ...context.repo,
#               issue_number: context.issue.number,
#               body: comment
#             });
