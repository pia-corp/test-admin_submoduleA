name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: npm install

      - name: Run HTMLHint
        run: npx htmlhint public/**/*.html

      # - name: Run Stylelint
      #   run: npx stylelint "public/assets/css/**/*.css"

      # - name: Run ESLint
      #   run: npx eslint public/assets/js/**/*.js

  link-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: npm install axios cheerio

      - name: Run link checker
        run: node link-checker.js

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: npm install

      # - name: Start server
      #   run: npx http-server -p 8081

      # - name: Run Lighthouse
      #   run: node lighthouse-check.js

      - name: Install dependencies
        run: npm install -g lighthouse chrome-launcher jq

      - name: Start Server
        run: npx http-server -p 8081 &

      - name: Check Server Availability
        run: |
          sleep 5 # サーバーが完全に起動するのを待つ
          curl -I http://localhost:8081 || exit 1

      - name: Run Lighthouse with security bypass
        run: |
          lighthouse http://localhost:8081 \
            --output=json \
            --output-path=./lighthouse-report.json \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage --ignore-certificate-errors --disable-features=BlockInsecurePrivateNetworkRequests"

      - name: Extract Lighthouse Scores to GITHUB_OUTPUT
        id: extract_scores
        run: |
          echo "PERFORMANCE=$(jq '.categories.performance.score * 100' lighthouse-report.json)" >> "$GITHUB_OUTPUT"
          echo "ACCESSIBILITY=$(jq '.categories.accessibility.score * 100' lighthouse-report.json)" >> "$GITHUB_OUTPUT"
          echo "BEST_PRACTICES=$(jq '.categories[\"best-practices\"].score * 100' lighthouse-report.json)" >> "$GITHUB_OUTPUT"
          echo "SEO=$(jq '.categories.seo.score * 100' lighthouse-report.json)" >> "$GITHUB_OUTPUT"

      - name: Show Lighthouse Scores in GitHub Actions log
        run: |
          echo "🏆 Lighthouse Scores:"
          echo "🚀 Performance: ${{ steps.extract_scores.outputs.PERFORMANCE }}"
          echo "♿ Accessibility: ${{ steps.extract_scores.outputs.ACCESSIBILITY }}"
          echo "🔍 SEO: ${{ steps.extract_scores.outputs.SEO }}"
          echo "🔧 Best Practices: ${{ steps.extract_scores.outputs.BEST_PRACTICES }}"


  optimize-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install imagemin
        run: npm install imagemin imagemin-mozjpeg imagemin-pngquant

      - name: Optimize images
        run: |
          npx imagemin public/assets/images/* --out-dir=public/assets/images/
