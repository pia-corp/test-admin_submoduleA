name: CI

on:
  pull_request:
    branches:
      - 'main'
    types: [opened, reopened, synchronize]

# 同じPRで複数のワークフローが実行されないようにする設定
# 新しいコミットがプッシュされた場合、進行中の古いワークフローは自動的にキャンセルされる
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  # =============================
  # HTMLファイルに対してmarkuplintによる静的解析を実行し、コードの品質を検証します。
  # =============================
  html-linter:
    name: HTMLマークアップリンター
    # 実行条件：
    # - ベースブランチがmain
    # - 実行者がdependabotではない
    # - ヘッドブランチ名がdevelopで始まる
    if: github.base_ref == 'main' && github.actor != 'dependabot[bot]' && startsWith(github.head_ref, 'develop')

    runs-on: ubuntu-latest
    # 実行時間が3分を超えた場合、ワークフローを強制終了
    timeout-minutes: 3
    # 必要な権限のみを付与
    permissions:
      contents: read         # リポジトリコンテンツの読み取り権限
      pull-requests: write   # PRへのコメント投稿権限

    steps:
      # リポジトリのコードをチェックアウト
      - name: リポジトリをチェックアウト
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false  # 不要な認証情報を保持しない

      # Node.js環境のセットアップ
      - name: Node.jsセットアップ
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v3.5.1
        with:
          node-version: 'latest'  # 最新のNode.jsバージョンを使用

      # 依存関係をインストール
      - name: Install dependencies
        run: npm ci

      - name: Run markuplint
        id: markuplint
        run: |
          # HTMLファイルを探して結果をJSONで出力
          FILES=$(find . -type f -name "*.html" -o -name "*.htm")
          ERROR_COUNT=0
          COMMENT=""

          for file in $FILES; do
            # markuplintを実行し、結果をJSONで出力
            RESULT=$(npx markuplint "$file" --format JSON)


            # エラーがある場合のみ処理
            if [ "$(echo "$RESULT" | jq 'length')" -gt 0 ]; then
              ERROR_COUNT=$((ERROR_COUNT + 1))

              # 相対パスに変換
              RELATIVE_FILE=$(echo "$file" | sed 's|^\./||')

              # マークダウン形式のコメントを作成
              COMMENT="${COMMENT}### ファイル: \`${RELATIVE_FILE}\`\n\n"
              COMMENT="${COMMENT}| 行 | 列 | メッセージ | ルール |\n"
              COMMENT="${COMMENT}|---|---|---|---|\n"

              # 各エラーをテーブル行として追加
              echo "$RESULT" | jq -c '.[]' | while read -r error; do
                LINE=$(echo "$error" | jq -r '.location.line')
                COL=$(echo "$error" | jq -r '.location.col')
                MESSAGE=$(echo "$error" | jq -r '.message')
                RULE=$(echo "$error" | jq -r '.ruleId')

                COMMENT="${COMMENT}| ${LINE} | ${COL} | ${MESSAGE} | ${RULE} |\n"
              done

              COMMENT="${COMMENT}\n"
            fi
          done

          # 結果をファイルに出力
          echo "$COMMENT" > markuplint-results.md

          # 環境変数に保存（後でコメントに使用）
          echo "ERROR_COUNT=$ERROR_COUNT" >> $GITHUB_ENV
          echo "COMMENT<<EOF" >> $GITHUB_ENV
          echo "$COMMENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Comment on PR
        if: env.ERROR_COUNT != '0'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            const comment = `# Markuplint 検査結果 🔍

            ${process.env.COMMENT}

            詳細は [markuplint のドキュメント](https://markuplint.dev/) を参照してください。`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      # # markuplintを実行
      # - name: Run linter
      #   run: npm run linter

  # =============================
  # リポジトリ内のHTMLファイルのリンク切れをチェックします。見つかったリンク切れはプルリクエストのコメントとして報告されます。
  # =============================
  check-links:
    needs: html-linter
    name: リンク切れチェック
    runs-on: ubuntu-latest
    # 実行時間が5分を超えた場合、ワークフローを強制終了
    timeout-minutes: 5
    # 必要な権限のみを付与
    permissions:
      contents: read         # リポジトリコンテンツの読み取り権限
      pull-requests: write   # PRへのコメント投稿権限

    # =============================
    # 環境変数の設定
    # - イベントタイプに応じて異なるソースから値を取得
    # - 必要に応じてデフォルト値を設定
    # =============================
    env:
      REPOSITORY_NAME: ${{ github.event.repository.name }}

    steps:
      # リポジトリのコードをチェックアウト
      - name: リポジトリをチェックアウト
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false  # 不要な認証情報を保持しない

      # Node.js環境のセットアップ
      - name: Node.jsセットアップ
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v3.5.1
        with:
          node-version: 'latest'  # 最新のNode.jsバージョンを使用

      # 依存関係をインストール
      - name: Install dependencies
        run: npm ci

      # ローカルHTTPサーバーを起動（リンクチェックのため）
      - name: Start local server
        run: |
          npx http-server ./public -p 8081 &
          sleep 5

      # リンクチェッカースクリプトを実行
      - name: Run link checker
        id: link-checker
        run: |
          cp .github/actions/link-checker.js .
          node link-checker.js

      # 見つかったリンク切れをPRにコメント
      - name: Post broken links to PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const errorsArray = ${{ steps.link-checker.outputs.errors }}

            // エラーメッセージを整形
            let message = "";
            for (let key in errorsArray) {
              for (let i = 0, len = errorsArray[key].length; i < len; i++) {
                message += `| ${key} | ${errorsArray[key][i]} |\n`;
              }
            }

            const comment = `
              ## リンク切れレポート
              | ファイル名 | リンク切れパス |
              | :-- | :-- |
              ${message}

              ## 注意
              ・リンク切れは最大100件まで表示されます。
            `;
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # =============================
  # 検証環境へアップロードしたURLでPSIを実行し、パフォーマンス分析を行います。
  # =============================
  page_speed_analysis:
    needs: check-links
    name: パフォーマンス分析
    runs-on: ubuntu-latest
    # 実行時間が30分を超えた場合、ワークフローを強制終了
    timeout-minutes: 30
    permissions:
      contents: read         # リポジトリコンテンツの読み取り権限
      pull-requests: write   # PRへのコメント投稿権限

    # =============================
    # 環境変数の設定
    # - GitHub変数から環境設定を取得
    # - 出力値の定義
    # =============================
    outputs:
      html_files: ${{ steps.extract_html_diff.outputs.html_files }}
      html_count: ${{ steps.extract_html_diff.outputs.html_count }}

    env:
      # 接続情報
      DEV_SERVER_HOST: ${{ vars.DEVELOPMENT_HOST }}
      DEV_SERVER_PORT: ${{ vars.DEVELOPMENT_PORT }}
      DEV_SERVER_USER: ${{ vars.DEVELOPMENT_USER_NAME }}

      # パス設定
      LOCAL_SOURCE_PATH: ${{ vars.LOCAL_PATH }}
      REMOTE_PROJECT_PATH: ${{ vars.DEVELOPMENT_REMOTE_PATH }}/${{ github.event.repository.name }}

      # デプロイ設定
      SYNC_MODE: "full"

    steps:
      # リポジトリのコードをチェックアウト
      - name: リポジトリをチェックアウト
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false  # 不要な認証情報を保持しない

      - name: SSH接続の設定
        run: |
          # SSHディレクトリの準備
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # セキュリティ強化：環境変数の事前バリデーション - インジェクション攻撃対策
          # ホスト名のバリデーション（厳格なパターンのみ許可）
          if ! [[ "${{ env.DEV_SERVER_HOST }}" =~ ^[a-zA-Z0-9][a-zA-Z0-9.-]{0,61}[a-zA-Z0-9](\.[a-zA-Z]{2,})+$ ]]; then
            echo "エラー: 無効なサーバーホスト名が指定されています" >&2
            exit 1
          fi
          VALIDATED_HOST="${{ env.DEV_SERVER_HOST }}"

          # ポート番号のバリデーション（数値のみ、範囲チェック）
          if ! [[ "${{ env.DEV_SERVER_PORT }}" =~ ^[0-9]+$ ]] || \
            [ "${{ env.DEV_SERVER_PORT }}" -lt 1 ] || \
            [ "${{ env.DEV_SERVER_PORT }}" -gt 65535 ]; then
            echo "エラー: 無効なポート番号が指定されています" >&2
            exit 1
          fi
          VALIDATED_PORT="${{ env.DEV_SERVER_PORT }}"

          # ユーザー名のバリデーション（英数字とアンダースコアのみ）
          if ! [[ "${{ env.DEV_SERVER_USER }}" =~ ^[a-zA-Z0-9_]+$ ]]; then
            echo "エラー: 無効なユーザー名が指定されています" >&2
            exit 1
          fi
          VALIDATED_USER="${{ env.DEV_SERVER_USER }}"

          # プロジェクトパスのバリデーション（安全な文字のみ）
          SANITIZED_PATH=$(echo "${{ env.REMOTE_PROJECT_PATH }}" | sed 's/[^a-zA-Z0-9_/-]//g')
          # 追加チェック - 空文字列やディレクトリトラバーサルの防止
          if [ -z "$SANITIZED_PATH" ] || [[ "$SANITIZED_PATH" == *".."* ]]; then
            echo "エラー: 無効なプロジェクトパスが指定されています" >&2
            exit 1
          fi

          # 秘密鍵のセットアップ
          echo "${{ secrets.DEVELOPMENT_SSH_KEY }}" > ~/.ssh/id_rsa.enc
          echo "${{ secrets.SSH_PASSPHRASE }}" | openssl rsa -in ~/.ssh/id_rsa.enc -out ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # SSH設定ファイルの作成 - ヒアドキュメントの代わりに複数のechoを使用
          echo "Host ${VALIDATED_HOST}" > ~/.ssh/config
          echo "  User ${VALIDATED_USER}" >> ~/.ssh/config
          echo "  Port ${VALIDATED_PORT}" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

          # SSHコマンドの安全な構築 - 引数の分離とクォートに注意
          ssh -p "${VALIDATED_PORT}" \
              -o StrictHostKeyChecking=no \
              -i ~/.ssh/id_rsa \
              "${VALIDATED_USER}@${VALIDATED_HOST}" \
              "mkdir -p '${SANITIZED_PATH}'"

      # デプロイ処理
      - name: 検証環境へファイルをデプロイ
        uses: milanmk/actions-file-deployer@3cf188f493103b5f12f11221186f8fbd07f2be10 # 1.16
        with:
          remote-protocol: 'sftp'
          remote-host: ${{ env.DEV_SERVER_HOST }}
          remote-port: ${{ env.DEV_SERVER_PORT }}
          remote-user: ${{ env.DEV_SERVER_USER }}
          ssh-private-key: ~/.ssh/id_rsa
          local-path: ${{ env.LOCAL_SOURCE_PATH }}
          remote-path: ${{ env.REMOTE_PROJECT_PATH }}
          sync: ${{ env.SYNC_MODE }}
          debug: false

      # 変更ファイル分析
      - name: 変更されたHTMLファイルを抽出
        id: extract_html_diff
        run: |
          # mainブランチと比較するためにfetch
          git fetch origin main || echo "mainブランチの取得に失敗しました。新規リポジトリの場合は無視できます。"

          # publicディレクトリ配下のHTMLファイルのみを抽出
          HTML_FILES=$(git diff --name-only origin/main HEAD | grep -E 'public/.*\.html$' | sed 's#^public/##g' | tr '\n' ',' || echo "")

          # 末尾のカンマを削除
          HTML_FILES=${HTML_FILES%,}

          # 結果の処理
          if [ -n "$HTML_FILES" ]; then
            HTML_COUNT=$(echo "$HTML_FILES" | awk -F',' '{print NF}')
            echo "変更されたHTMLファイル: $HTML_FILES (合計: $HTML_COUNT件)"
          else
            echo "変更されたHTMLファイルはありません"
            HTML_FILES=""
            HTML_COUNT=0
          fi

          # GitHub Actions出力を設定
          echo "html_files=${HTML_FILES}" >> $GITHUB_OUTPUT
          echo "html_count=${HTML_COUNT}" >> $GITHUB_OUTPUT

      # パフォーマンス分析
      - name: PageSpeed Insights分析を実行
        if: ${{ steps.extract_html_diff.outputs.html_count != '0' }}
        env:
          PSI_API_KEY: ${{ secrets.PSI_API_KEY }}
          BASE_URL: "https://piapiapia.xsrv.jp/dev/${{ github.event.repository.name }}"
          HTML_FILES: ${{ steps.extract_html_diff.outputs.html_files }}
        id: psi_analysis
        run: |
          echo "分析対象ファイル: ${{ steps.extract_html_diff.outputs.html_files }}"
          RESULT=$(node .github/actions/psi)
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 結果の報告
      - name: PSI分析結果をPRにコメント
        if: ${{ steps.extract_html_diff.outputs.html_count != '0' && steps.psi_analysis.outcome == 'success' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = `${{ steps.psi_analysis.outputs.result }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: result
            });
