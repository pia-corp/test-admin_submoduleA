name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  link-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: npm install

      - name: Install htmltest
        run: |
          curl -L https://github.com/wjdp/htmltest/releases/latest/download/htmltest-linux-amd64 > /usr/local/bin/htmltest
          chmod +x /usr/local/bin/htmltest

      - name: Run htmltest and save log
        run: |
          htmltest public -c .htmltest.yml 2>&1 | tee $GITHUB_WORKSPACE/htmltest.log


      - name: Show Internal Link Errors
        run: echo "${{ steps.extract_errors.outputs.internal_link_errors }}"

      - name: Use link checker Output
        run: |
          echo "link checker result string: ${{ steps.linkchecker_step.outputs.resultString }}" >> $GITHUB_OUTPUT

      - name: Annotate broken links
        if: always()
        run: |
          INTERNAL_ERRORS="${{ steps.extract_errors.outputs.internal_link_errors }}"
          if [[ -n "$INTERNAL_ERRORS" ]]; then
            echo "$INTERNAL_ERRORS" | while IFS= read -r line; do
              echo "::error file=index.html::Broken internal link: $line"
            done
          else
            echo "::notice::No internal link errors found."
          fi





# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   lint:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 'latest'

#       - name: Install dependencies
#         run: npm install

#       - name: Run HTMLHint
#         run: npx htmlhint public/**/*.html

#   link-check:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 'latest'

#       - name: Install dependencies
#         run: npm install

#       - name: Run link checker
#         id: linkchecker_step
#         run: |
#           # curl https://htmltest.wjdp.uk | sudo bash -s -- -b /usr/local/bin
#           # npx http-server -p 8080 &
#           # node link-checker.js

#       - name: Run htmltest
#         id: htmltest
#         uses: wjdp/htmltest-action@master
#         with:
#           path: public
#           config: .htmltest.yml
#         continue-on-error: true

#       - name: Extract internal link errors
#         run: |
#           # HTMLTEST_LOG „ÇíÂèñÂæó
#           HTMLTEST_LOG=$(cat $GITHUB_WORKSPACE/htmltest.log)

#           # ÂÜÖÈÉ®„É™„É≥„ÇØ„Ç®„É©„Éº„ÅÆ„ÅøÊäΩÂá∫Ôºà"target does not exist" „Åã„Å§ http „ÇíÂê´„Åæ„Å™„ÅÑÔºâ
#           INTERNAL_ERRORS=$(echo "$HTMLTEST_LOG" | grep -E 'target does not exist' | grep -v 'http' || true)

#           # GITHUB_OUTPUT „Å´Ë®≠ÂÆö
#           echo "internal_link_errors<<EOF" >> $GITHUB_ENV
#           echo "$INTERNAL_ERRORS" >> $GITHUB_ENV
#           echo "EOF" >> $GITHUB_ENV

#       - name: Show Internal Link Errors
#         run: echo "$internal_link_errors"



#       - name: Use link checker Output
#         run: |
#           echo "link checker result string: ${{ steps.linkchecker_step.outputs.resultString }}" >> $GITHUB_OUTPUT

#       - name: Annotate broken links
#         if: always()
#         run: |
#           if [ -f /tmp/github_output ]; then
#             while IFS= read -r line; do
#               echo "::error file=link-checker.js::Broken link detected: $line"
#             done < /tmp/github_output
#           fi

#   lighthouse:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 'latest'

#       - name: Install dependencies
#         run: npm install

#       - name: Start Server
#         run: npx http-server -p 8080 &

#       - name: Check Server Availability
#         run: |
#           sleep 5 # „Çµ„Éº„Éê„Éº„ÅåÂÆåÂÖ®„Å´Ëµ∑Âãï„Åô„Çã„ÅÆ„ÇíÂæÖ„Å§
#           curl -I http://localhost:8080 || exit 1

#       - name: Run Lighthouse with security bypass
#         id: extract_scores
#         run: |
#           lighthouse http://localhost:8080 \
#             --output=json \
#             --output-path=./lighthouse-report.json \
#             --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage --ignore-certificate-errors --disable-features=BlockInsecurePrivateNetworkRequests"
#           PERFORMANCE=$(jq '.categories.performance.score * 100' lighthouse-report.json)
#           ACCESSIBILITY=$(jq '.categories.accessibility.score * 100' lighthouse-report.json)
#           BEST_PRACTICES=$(jq '.categories["best-practices"].score * 100' lighthouse-report.json)
#           SEO=$(jq '.categories.seo.score * 100' lighthouse-report.json)
#           echo "::set-output name=PERFORMANCE::$PERFORMANCE"
#           echo "::set-output name=ACCESSIBILITY::$ACCESSIBILITY"
#           echo "::set-output name=BEST_PRACTICES::$BEST_PRACTICES"
#           echo "::set-output name=SEO::$SEO"

#       - name: Show Lighthouse Scores in GitHub Actions log
#         run: |
#           echo "üèÜ Lighthouse Scores:"
#           echo "üöÄ Performance: ${{ steps.extract_scores.outputs.PERFORMANCE }}"
#           echo "‚ôø Accessibility: ${{ steps.extract_scores.outputs.ACCESSIBILITY }}"
#           echo "üîç SEO: ${{ steps.extract_scores.outputs.SEO }}"
#           echo "üîß Best Practices: ${{ steps.extract_scores.outputs.BEST_PRACTICES }}"
