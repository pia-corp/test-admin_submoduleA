name: PageSpeed Insights Check
on:
  pull_request:
    branches:
      - main
    types: [opened, edited, reopened, synchronize]

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'latest'

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Lint and rewrite markup
      run: npm run linter

  check_links:
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-link-checker-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-link-checker-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Cache http-server output
        uses: actions/cache@v3
        with:
          path: ./.http-server-cache
          key: ${{ runner.os }}-http-server-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-http-server-

      - name: Create cache directory if it doesn't exist
        run: mkdir -p ./.http-server-cache

      - name: Start local server
        run: |
          npx http-server ./public -p 8081 --cache ./.http-server-cache &
          sleep 5

      - name: Run link checker
        id: link-checker
        run: node link-checker.js

      - name: Post broken links to PR
        uses: actions/github-script@v6
        with:
          script: |
            const errorsArray = ${{ steps.link-checker.outputs.errors }}

            let message = "";
            for (let key in errorsArray) {
              for (let i = 0, len = errorsArray[key].length; i < len; i++) {
                message += `| ${key} | ${errorsArray[key][i]} |\n`;
              }
            }

            const comment = `
              ## Broken Links Report
              | ファイル名 | リンク切れパス |
              | :-- | :-- |
              ${message}
            `;
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: comment
            });

  extract-diff-and-deploy:
    name: Extract Changes and Deploy
    runs-on: ubuntu-latest
    outputs:
      html_files: ${{ steps.extract_html_diff.outputs.html_files }}
      html_count: ${{ steps.extract_html_diff.outputs.html_count }}
      all_changed_files: ${{ steps.extract_diff.outputs.all_changed_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Extract all changed files
        id: extract_diff
        run: |
          # すべての変更ファイルを抽出（publicフォルダ内のみ）
          ALL_FILES=$(git diff --name-only origin/main HEAD | grep '^public/' | tr '\n' ',' || echo "")
          # 末尾のカンマを削除
          ALL_FILES=${ALL_FILES%,}

          echo "all_changed_files=${ALL_FILES}" >> $GITHUB_OUTPUT

          # 変更ファイルリストをファイルに保存（LFTP用）
          echo "$ALL_FILES" | tr ',' '\n' > changed_files.txt

      - name: Extract HTML file differences
        id: extract_html_diff
        run: |
          # HTMLファイルのみを抽出
          HTML_FILES=$(git diff --name-only origin/main HEAD | grep -E 'public/.*\.html$' | sed 's#^public/##g' | tr '\n' ',' || echo "")

          # 末尾のカンマを削除
          HTML_FILES=${HTML_FILES%,}

          # 結果を出力
          if [ -z "$HTML_FILES" ]; then
            echo "No HTML files changed"
            HTML_COUNT=0
          else
            echo "HTML files changed:"
            echo "$HTML_FILES"
            # 変更があったHTMLファイルの数をカウント
            HTML_COUNT=$(echo "$HTML_FILES" | tr ',' '\n' | wc -l)
          fi

          echo "html_files=${HTML_FILES}" >> $GITHUB_OUTPUT
          echo "html_count=${HTML_COUNT}" >> $GITHUB_OUTPUT

      - name: Install lftp
        run: sudo apt-get install -y lftp
        if: steps.extract_diff.outputs.all_changed_files != ''

      - name: Upload changed files with LFTP
        if: steps.extract_diff.outputs.all_changed_files != ''
        run: |
          # LFTPでの並列転送（差分ファイルのみ）
          lftp -e "
          set ftp:ssl-allow true;
          set ssl:verify-certificate false;
          set net:max-retries 3;
          set net:timeout 10;
          set net:reconnect-interval-base 5;
          set net:reconnect-interval-multiplier 1;
          set mirror:parallel-directories true;

          open -u ${{ secrets.DEVELOPMENT_USER_NAME }},${{ secrets.DEVELOPMENT_PASSWORD }} ${{ secrets.DEVELOPMENT_HOST }};

          # 並列転送設定
          set mirror:parallel-transfer-count 10;
          set pget:parallel-transfer-count 5;

          # 差分ファイルを転送
          cd /path/to/server/directory/;

          # changedファイルを並列アップロード
          cat ../changed_files.txt | while read file; do
            if [ -f \"\$file\" ]; then
              dir=\$(dirname \"\$file\" | sed 's#^public/##g')
              filename=\$(basename \"\$file\")
              echo \"Uploading \$file to \$dir\";

              # ディレクトリが存在しない場合は作成
              mkdir -p \"\$dir\" 2>/dev/null || true

              # ファイルをアップロード
              put -O \"\$dir\" \"\$file\";
            fi
          done &

          # 並列ジョブでアップロード完了を待機
          wait;
          bye
          "

  check_psi:
    needs: extract-diff-and-deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ needs.extract-diff-and-deploy.outputs.html_count > 0 }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4.2.0
        with:
          node-version: 'latest'

      - name: Check PSI
        env:
          PSI_API_KEY: ${{ secrets.PSI_API_KEY }}
          BASE_URL: "${{ vars.DEVELOPMENT_REMOTE_PATH }}/${{ github.repository }}/}"
          HTML_FILES: ${{ needs.extract-diff-and-deploy.outputs.html_files }}
        id: psi_check
        run: |
          echo "HTML_FILES: ${{ needs.extract-diff-and-deploy.outputs.html_files }}"
          RESULT=$(node .github/actions/psi)
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment PR with PSI results
        uses: actions/github-script@v7.0.1
        if: ${{ always() && steps.psi_check.outcome == 'success' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = `${{ steps.psi_check.outputs.result }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: result
            });

  cache-cleanup:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    # ワークフローの最後に必ず実行
    if: ${{ always() }}
    steps:
      - name: Cleanup
        run: |
          # GH CLIのインストール（キャッシュ削除に必要）
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi

          # キャッシュ拡張機能のインストール
          gh extension install actions/gh-actions-cache

          set +e
          echo "Deleting caches..."
          gh actions-cache list -R $REPO -L 100 | while read -r cacheKey _ branch _
          do
            gh actions-cache delete "$cacheKey" -R $REPO -B "$branch" --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
