name: Lighthouse Audit

on:
  pull_request:
    branches:
      - main
    types: [opened, edited, reopened, synchronize]

jobs:
  Lighthouse:
    name: Lighthouse-CI
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: 20

      # - name: Generate URLs
      #   id: urls
      #   uses: actions/github-script@v7.0.1
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const globber = await glob.create('public/**/*.html');
      #       const files = await globber.glob();
      #       const urls = files
      #         .map(x => x.match(/([\w-]+)/)[1])
      #         .map(x => `${${{ env.DOMAIN }}}/components/${x}/demo/`)
      #         .join('\n');
      #       core.setOutput('urls', urls);

      - name: Run Lighthouse against a static dist dir
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ steps.urls.outputs.urls }}
          configPath: ./.github/config/.lighthouserc.json
          budgetPath: ./.github/config/.budget.json
          temporaryPublicStorage: true
        continue-on-error: true
        # env: http://pia2024:piapiapia@piapiapia.xsrv.jp/test/clainel.jp/index.html
        # http://pia2024:piapiapia@piapiapia.xsrv.jp/test/clainel.jp/

      - name: Comment on PR with Lighthouse results
        id: format_lighthouse_score
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const urls = ${{ steps.lighthouse_audit.outputs.links }};
            const assertions =${{ steps.lighthouse_audit.outputs.assertionResults }};
            const manifest = ${{ steps.lighthouse_audit.outputs.manifest }};

            console.log(urls);
            console.log(assertions);
            console.log(manifest);

            // JSONからURLとスコア情報を抽出
            const scoreData = [];

            // マニフェストからURLごとのデバイス情報とスコアを取得
            for (const item of manifest) {
              const urlKey = item.url;
              const deviceType = item.isDesktop ? 'Desktop' : 'Mobile';
              const reportUrl = urls[urlKey];

              // ファイル名を取得（URLからパスのみを抽出）
              const parsedUrl = new URL(urlKey);
              const fileName = parsedUrl.pathname === '/' ? 'index.html' : parsedUrl.pathname.split('/').pop();

              // 各カテゴリのスコアを取得 (summaryから直接取得)
              if (item.summary) {
                const performance = Math.round(item.summary.performance * 100);
                const accessibility = Math.round(item.summary.accessibility * 100);
                const bestPractices = Math.round(item.summary['best-practices'] * 100);
                const seo = Math.round(item.summary.seo * 100);

                scoreData.push({
                  fileName,
                  device: deviceType,
                  performance,
                  accessibility,
                  bestPractices,
                  seo,
                  reportUrl
                });
              }
            }

            // マークダウンテーブルの作成
            let markdownTable = '## 🔍 Lighthouse 監査結果\n\n';
            markdownTable += '| File name | Device | Performance | Accessibility | Best Practices | SEO | Report URL |\n';
            markdownTable += '| --------- | ------ | ----------- | ------------- | -------------- | --- | ---------- |\n';

            for (const data of scoreData) {
              // スコアに基づいて絵文字を追加
              const getEmojiForScore = (score) => {
                if (score === undefined || score === null) return '⚪️';
                if (score >= 90) return '🟢';
                if (score >= 50) return '🟠';
                return '🔴';
              };

              markdownTable += `| ${data.fileName} | ${data.device} | ${getEmojiForScore(data.performance)} ${data.performance} | ${getEmojiForScore(data.accessibility)} ${data.accessibility} | ${getEmojiForScore(data.bestPractices)} ${data.bestPractices} | ${getEmojiForScore(data.seo)} ${data.seo} | [詳細](${data.reportUrl}) |\n`;
            }

            // 概要説明を追加
            markdownTable += '\n### スコア評価\n';
            markdownTable += '- 🟢 90-100: 良好\n';
            markdownTable += '- 🟠 50-89: 改善推奨\n';
            markdownTable += '- 🔴 0-49: 要修正\n';

            // PRにコメントを投稿
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: prNumber,
              body: markdownTable
            });

            console.log('Lighthouse監査結果をPRにコメントしました');
