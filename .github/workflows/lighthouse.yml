name: Lighthouse Audit

on:
  pull_request:
    branches:
      - main
    types: [opened, edited, reopened, synchronize]

jobs:
  lhci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          npm install -g @lhci/cli puppeteer
          npm install -g serve

      - name: Start local server
        run: |
          npx serve public -l 8080 &
          # Save PID to kill server later
          echo $! > .server-pid
          # Wait for server to start
          sleep 5

      - name: Create LHCI configuration
        run: |
          cat > lighthouserc.json << EOF
          {
            "ci": {
              "collect": {
                "url": [],
                "staticDistDir": "./public",
                "numberOfRuns": 1,
                "settings": {
                  "preset": "desktop"
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOF

      - name: Run Lighthouse CI against static dir
        id: lighthouse
        run: |
          echo "Running Lighthouse CI"

          # Create results directory
          REPORTS_DIR="lighthouse-reports"
          mkdir -p $REPORTS_DIR

          # Initialize markdown table
          echo "| File name | Performance | Accessibility | Best practices | SEO |" > $REPORTS_DIR/summary.md
          echo "| --------- | ----------- | ------------- | -------------- | --- |" >> $REPORTS_DIR/summary.md

          # Find all HTML files in public folder
          HTML_FILES=$(find public -name "*.html")

          # Process each HTML file
          for file in $HTML_FILES; do
            # Get relative path to display in report
            RELATIVE_PATH=$(echo $file | sed 's|^public/||')
            FILENAME=$(basename "$file" .html)
            echo "Processing $RELATIVE_PATH"

            # Run Lighthouse CI for this specific file
            URL="http://localhost:8080/$(echo $file | sed 's|^public/||')"

            # Run LHCI and save output to a JSON file
            lhci collect --url="$URL" --outDir="$REPORTS_DIR/$FILENAME"

            # Get the latest JSON report
            REPORT_FILE=$(find "$REPORTS_DIR/$FILENAME" -name "*.json" | head -n 1)

            if [ -f "$REPORT_FILE" ]; then
              # Extract scores
              PERFORMANCE=$(node -e "console.log(Math.round(require('$REPORT_FILE').categories.performance.score * 100))")
              ACCESSIBILITY=$(node -e "console.log(Math.round(require('$REPORT_FILE').categories.accessibility.score * 100))")
              BEST_PRACTICES=$(node -e "console.log(Math.round(require('$REPORT_FILE').categories['best-practices'].score * 100))")
              SEO=$(node -e "console.log(Math.round(require('$REPORT_FILE').categories.seo.score * 100))")

              # Print scores for debugging
              echo "Scores for $RELATIVE_PATH:"
              echo "  Performance: $PERFORMANCE"
              echo "  Accessibility: $ACCESSIBILITY"
              echo "  Best Practices: $BEST_PRACTICES"
              echo "  SEO: $SEO"

              # Add to markdown table
              echo "| $RELATIVE_PATH | $PERFORMANCE | $ACCESSIBILITY | $BEST_PRACTICES | $SEO |" >> $REPORTS_DIR/summary.md
            else
              echo "Error: Report not generated for $RELATIVE_PATH"
              echo "| $RELATIVE_PATH | Error | Error | Error | Error |" >> $REPORTS_DIR/summary.md
            fi
          done

          # Run LHCI upload to get sharable URL
          echo "Uploading full reports to temporary public storage"
          UPLOAD_RESULT=$(lhci upload --target=temporary-public-storage)
          REPORT_URL=$(echo "$UPLOAD_RESULT" | grep -o 'https://storage.googleapis.com/lighthouse-infrastructure.appspot.com/reports/[^"]*')

          # Save results to environment variable for comment
          SUMMARY_CONTENT=$(cat $REPORTS_DIR/summary.md)
          echo "summary<<EOF" >> $GITHUB_ENV
          echo "$SUMMARY_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "report_url=$REPORT_URL" >> $GITHUB_ENV

      - name: Kill server
        if: always()
        run: |
          if [ -f .server-pid ]; then
            kill $(cat .server-pid) || true
          fi

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = process.env.summary;
            const reportUrl = process.env.report_url;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ“Š Lighthouse Audit Results
            ${summary}

            [ðŸ“‹ View detailed Lighthouse report](${reportUrl})

            _This comment was automatically generated using Lighthouse CI._`
            });

      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: lighthouse-reports
