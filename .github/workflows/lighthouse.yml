name: Lighthouse CI

on:
  pull_request:
    branches:
      - main
    types: [opened, edited, reopened, synchronize]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Lighthouse binary
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/puppeteer
            ~/.cache/Cypress
            ~/.cache/lighthouse
          key: ${{ runner.os }}-lighthouse-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-lighthouse-

      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-packages-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-apt-packages-

      - name: Install Dependencies
        run: |
          npm install -g lighthouse
          if ! command -v parallel &> /dev/null; then
            sudo apt-get update
            sudo apt-get install parallel -y
          fi

      - name: Cache HTTP server results
        uses: actions/cache@v3
        with:
          path: ./.http-server-cache
          key: ${{ runner.os }}-http-server-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-http-server-

      - name: Create cache directory
        run: mkdir -p ./.http-server-cache

      - name: Start static server
        run: |
          npx http-server public -p 8080 --cache ./.http-server-cache &
          echo "Waiting for server to start..."
          timeout=30
          elapsed=0
          until curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 | grep -q "200" || [ $elapsed -ge $timeout ]; do
            sleep 2
            elapsed=$((elapsed+2))
            echo "Waiting for server... ($elapsed/$timeout seconds)"
          done

          if [ $elapsed -ge $timeout ]; then
            echo "Server failed to start within timeout period"
            exit 1
          fi

          echo "Server started successfully"

      - name: Cache Lighthouse results
        uses: actions/cache@v3
        with:
          path: ./lighthouse-results
          key: ${{ runner.os }}-lighthouse-results-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-lighthouse-results-

      - name: Create results directory
        run: mkdir -p ./lighthouse-results

      - name: Run Lighthouse for Desktop & Mobile (Parallel)
        run: |
          echo "| File name | Device  | Performance | Accessibility | Best practices | SEO |" > report.md
          echo "|-----------|---------|-------------|--------------|---------------|-----|" >> report.md

          find public -name "*.html" | parallel -j 2 '
            file={}
            url="http://localhost:8080/${file#public/}"
            filename=$(basename "$file" .html)

            # Create cache filenames
            desktop_cache="./lighthouse-results/${filename}-desktop.json"
            mobile_cache="./lighthouse-results/${filename}-mobile.json"

            # Desktop
            if [ ! -f "$desktop_cache" ]; then
              lighthouse "$url" --quiet --output=json --chrome-flags="--headless" --preset=desktop --output-path="$desktop_cache"
            fi

            results_desktop=$(cat "$desktop_cache")
            performance_d=$(echo "$results_desktop" | jq -r ".categories.performance.score // 0 * 100")
            accessibility_d=$(echo "$results_desktop" | jq -r ".categories.accessibility.score // 0 * 100")
            best_practices_d=$(echo "$results_desktop" | jq -r ".categories.\"best-practices\".score // 0 * 100")
            seo_d=$(echo "$results_desktop" | jq -r ".categories.seo.score // 0 * 100")
            echo "| $file | Desktop | $performance_d | $accessibility_d | $best_practices_d | $seo_d |" >> report.md

            # Mobile
            if [ ! -f "$mobile_cache" ]; then
              lighthouse "$url" --quiet --output=json --chrome-flags="--headless" --preset=mobile --output-path="$mobile_cache"
            fi

            results_mobile=$(cat "$mobile_cache")
            performance_m=$(echo "$results_mobile" | jq -r ".categories.performance.score // 0 * 100")
            accessibility_m=$(echo "$results_mobile" | jq -r ".categories.accessibility.score // 0 * 100")
            best_practices_m=$(echo "$results_mobile" | jq -r ".categories.\"best-practices\".score // 0 * 100")
            seo_m=$(echo "$results_mobile" | jq -r ".categories.seo.score // 0 * 100")
            echo "| $file | Mobile  | $performance_m | $accessibility_m | $best_practices_m | $seo_m |" >> report.md
          '

      - name: Debug report file
        run: cat report.md

      - name: Add PR comment
        if: success()
        uses: mshick/add-pr-comment@v2
        with:
          message-path: report.md
          allow-repeats: true
