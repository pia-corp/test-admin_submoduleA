name: Lighthouse Audit

on:
  pull_request:
    branches:
      - main
    types: [opened, edited, reopened, synchronize]

jobs:
  lhci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          npm install -g @lhci/cli@0.12.x
          npm install -g serve

      - name: Start local server
        run: |
          npx serve public -l 8080 &
          echo $! > .server-pid
          sleep 5
          echo "Server started on port 8080"

      - name: Run Lighthouse audits and collect scores
        id: lighthouse
        run: |
          echo "Running Lighthouse audits..."

          # Create markdown file for results
          echo "| File name | Performance | Accessibility | Best practices | SEO | URL |" > lighthouse-results.md
          echo "| --------- | ----------- | ------------- | -------------- | --- | --- |" >> lighthouse-results.md

          # Find all HTML files
          HTML_FILES=$(find public -name "*.html")

          # Create temporary directory for reports
          mkdir -p /tmp/lighthouse-reports

          # Setup a file to store the Lighthouse report URL
          touch /tmp/lhci-report-url.txt

          # For each HTML file
          for file in $HTML_FILES; do
            RELATIVE_PATH=$(echo $file | sed 's|^public/||')
            echo "Processing: $RELATIVE_PATH"

            # Full URL to the file
            FILE_URL="http://localhost:8080/$RELATIVE_PATH"
            echo "Testing URL: $FILE_URL"

            # Run Lighthouse CI
            lhci collect --url="$FILE_URL" --verbose

            # Find the latest report
            REPORT_PATH=$(find ./.lighthouseci -name "*.json" | sort | tail -n 1)
            echo "Report path: $REPORT_PATH"
            echo "Report: $REPORT_PATH"

            if [ -f "$REPORT_PATH" ]; then
              # Extract scores using a more reliable method
              PERFORMANCE=$(node -e "try { const report = require('$REPORT_PATH'); console.log(Math.round(report.categories.performance.score * 100)); } catch(e) { console.log('Error'); }")
              ACCESSIBILITY=$(node -e "try { const report = require('$REPORT_PATH'); console.log(Math.round(report.categories.accessibility.score * 100)); } catch(e) { console.log('Error'); }")
              BEST_PRACTICES=$(node -e "try { const report = require('$REPORT_PATH'); console.log(Math.round(report.categories['best-practices'].score * 100)); } catch(e) { console.log('Error'); }")
              SEO=$(node -e "try { const report = require('$REPORT_PATH'); console.log(Math.round(report.categories.seo.score * 100)); } catch(e) { console.log('Error'); }")

              # Debug: Print scores
              echo "Scores for $RELATIVE_PATH:"
              echo "  Performance: $PERFORMANCE"
              echo "  Accessibility: $ACCESSIBILITY"
              echo "  Best Practices: $BEST_PRACTICES"
              echo "  SEO: $SEO"

              # Add to results table
              echo "| $RELATIVE_PATH | $PERFORMANCE | $ACCESSIBILITY | $BEST_PRACTICES | $SEO | $FILE_URL |" >> lighthouse-results.md
            else
              echo "Error: No report found for $RELATIVE_PATH"
              echo "| $RELATIVE_PATH | Error | Error | Error | Error |" >> lighthouse-results.md
            fi

            # Clear previous reports for next file
            rm -f /tmp/lighthouse-reports/*
          done

          # Upload results to temporary storage
          echo "Uploading results to temporary storage..."
          UPLOAD_OUTPUT=$(lhci upload --target=temporary-public-storage)
          echo "Upload output: $UPLOAD_OUTPUT"

          # Extract the report URL from upload output
          REPORT_URL=$(echo "$UPLOAD_OUTPUT" | grep -o 'https://storage.googleapis.com/lighthouse-infrastructure.appspot.com/reports/[^[:space:]]*' | head -n 1)
          echo "Report URL: $REPORT_URL"

          # Save results to GITHUB_ENV
          echo "results<<EOF" >> $GITHUB_ENV
          cat lighthouse-results.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Save report URL to GITHUB_ENV
          echo "report_url=$REPORT_URL" >> $GITHUB_ENV

          # Save results as artifact
          mkdir -p ./lighthouse-results
          cp lighthouse-results.md ./lighthouse-results/
          cp -r ./.lighthouseci ./lighthouse-results/

      - name: Kill server
        if: always()
        run: |
          if [ -f .server-pid ]; then
            kill $(cat .server-pid) || true
          fi

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = process.env.results;
            const reportUrl = process.env.report_url;

            let comment = `## ðŸ“Š Lighthouse Audit Results\n\n${results}\n\n`;

            if (reportUrl && reportUrl !== "null" && reportUrl !== "") {
              comment += `[ðŸ“‹ View detailed Lighthouse report](${reportUrl})\n\n`;
            }

            comment += `_This comment was automatically generated using Lighthouse CI._`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: ./lighthouse-results
