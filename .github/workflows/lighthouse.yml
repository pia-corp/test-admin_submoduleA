name: Lighthouse Audit

on:
  pull_request:
    branches:
      - main
    types: [opened, edited, reopened, synchronize]

jobs:
  lighthouse-audit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: |
          npm install -g lighthouse
          sudo apt-get install jq

      - name: Start local server
        run: |
          npx serve -s public -l 8080 &
          echo $! > .server-pid
          sleep 10

      - name: Run Lighthouse
        run: |
          mkdir -p lighthouse-results

          # publicディレクトリ内のHTMLファイルを自動でリストアップ
          URLS=$(find public -name "*.html" | sed 's|public/||' | sed 's|^|http://localhost:8080/|')

          # 各HTMLページに対してLighthouseを実行
          for url in $URLS; do
            BASENAME=$(basename "$url" .html)  # URLからページ名（例: index, about）を取得
            # URLのディレクトリ構造も含めたファイル名を作成
            FILE_PATH="lighthouse-results/$(echo $url | sed 's|http://localhost:8080/||' | sed 's|/|_|g').json"
            lighthouse "$url" --quiet --chrome-flags="--headless --disable-device-emulation --no-sandbox" --output=json --output-path="$FILE_PATH" --throttling-method=provided --disable-network-throttling
          done

      - name: Generate Summary
        run: |
          REPORTS_DIR="lighthouse-results"
          JSON_FILES=$(find $REPORTS_DIR -name "*.json")

          echo "| File name | Performance | Accessibility | Best practices | SEO | URL |" > summary.md
          echo "| --------- | ----------- | ------------- | -------------- | --- | --- |" >> summary.md

          for file in $JSON_FILES; do
            RELATIVE_PATH=$(basename "$file" .json)  # ページ名をファイル名から取得
            PERFORMANCE=$(jq '.categories.performance.score * 100' "$file")
            ACCESSIBILITY=$(jq '.categories.accessibility.score * 100' "$file")
            BEST_PRACTICES=$(jq '.categories."best-practices".score * 100' "$file")
            SEO=$(jq '.categories.seo.score * 100' "$file")
            # URLをレポートに追加
            URL="http://localhost:8080/$(echo $RELATIVE_PATH | sed 's|_|/|g').html"

            echo "| $RELATIVE_PATH | $PERFORMANCE | $ACCESSIBILITY | $BEST_PRACTICES | $SEO | $URL |" >> summary.md
          done

      - name: Create GitHub release if not exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG="lighthouse-report-${{ github.run_id }}"
          if ! gh release view "$RELEASE_TAG" &> /dev/null; then
            gh release create "$RELEASE_TAG" --title "Lighthouse Audit Reports ($RELEASE_TAG)" --notes "Automated Lighthouse Reports"
          fi

      - name: Upload reports to GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG="lighthouse-report-${{ github.run_id }}"
          for file in lighthouse-results/*.json; do
            gh release upload "$RELEASE_TAG" "$(basename $file)" "$file" --clobber
          done

      - name: Post Lighthouse report to PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          gh pr comment ${{ github.event.pull_request.number }} --body "$(cat summary.md)"

      - name: Stop local server
        if: always()
        run: |
          if [ -f .server-pid ]; then
            kill $(cat .server-pid) || true
          fi
