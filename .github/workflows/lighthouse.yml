name: Lighthouse CI

on:
  pull_request:
    branches:
      - main
    types: [opened, edited, reopened, synchronize]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Lighthouse binary
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/puppeteer
            ~/.cache/Cypress
            ~/.cache/lighthouse
          key: ${{ runner.os }}-lighthouse-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-lighthouse-

      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-packages-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-apt-packages-

      - name: Install Dependencies
        run: |
          npm install -g lighthouse
          if ! command -v parallel &> /dev/null; then
            sudo apt-get update
            sudo apt-get install parallel -y
          fi

      - name: Cache HTTP server results
        uses: actions/cache@v3
        with:
          path: ./.http-server-cache
          key: ${{ runner.os }}-http-server-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-http-server-

      - name: Create cache directory
        run: mkdir -p ./.http-server-cache

      - name: Start static server
        run: |
          npx http-server public -p 8080 --cache ./.http-server-cache &
          echo "Waiting for server to start..."
          timeout=30
          elapsed=0
          until curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 | grep -q "200" || [ $elapsed -ge $timeout ]; do
            sleep 2
            elapsed=$((elapsed+2))
            echo "Waiting for server... ($elapsed/$timeout seconds)"
          done

          if [ $elapsed -ge $timeout ]; then
            echo "Server failed to start within timeout period"
            exit 1
          fi

          echo "Server started successfully"

      - name: Cache Lighthouse results
        uses: actions/cache@v3
        with:
          path: ./lighthouse-results
          key: ${{ runner.os }}-lighthouse-results-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-lighthouse-results-

      - name: Run Lighthouse for desktop
        run: |
          echo "| File name | Performance | Accessibility | Best practices | SEO |" > report.md
          echo "|-----------|-------------|--------------|---------------|-----|" >> report.md
          for file in $(find public -name "*.html"); do
            url="http://localhost:8080/${file#public/}"
            results=$(lighthouse $url --quiet --output=json --chrome-flags="--headless" --preset=desktop)
            performance=$(echo "$results" | jq -r '.categories.performance.score // 0 * 100')
            accessibility=$(echo "$results" | jq -r '.categories.accessibility.score // 0 * 100')
            best_practices=$(echo "$results" | jq -r '.categories."best-practices".score // 0 * 100')
            seo=$(echo "$results" | jq -r '.categories.seo.score // 0 * 100')
            echo "| $file | $performance | $accessibility | $best_practices | $seo |" >> report.md
          done

      - name: Run Lighthouse for mobile
        run: |
          for file in $(find public -name "*.html"); do
            url="http://localhost:8080/${file#public/}"
            results=$(lighthouse $url --quiet --output=json --chrome-flags="--headless" --preset=mobile)
            performance=$(echo "$results" | jq -r '.categories.performance.score // 0 * 100')
            accessibility=$(echo "$results" | jq -r '.categories.accessibility.score // 0 * 100')
            best_practices=$(echo "$results" | jq -r '.categories."best-practices".score // 0 * 100')
            seo=$(echo "$results" | jq -r '.categories.seo.score // 0 * 100')
            echo "| $file | $performance | $accessibility | $best_practices | $seo |" >> report.md
          done

      - name: Add PR comment
        uses: mshick/add-pr-comment@v2
        with:
          message-path: report.md
