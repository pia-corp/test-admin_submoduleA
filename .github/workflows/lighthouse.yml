name: Lighthouse Audit

on:
  pull_request:
    branches:
      - main
    types: [opened, edited, reopened, synchronize]

jobs:
  Lighthouse:
    name: Lighthouse-CI
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Get changed files
        id: changed_files
        uses: jitterbit/get-changed-files@v1

      - name: Filter relevant HTML files
        id: filter_html
        run: |
          changed_files=(${{ steps.changed_files.outputs.all }} )
          filtered_files=()
          for file in "${changed_files[@]}"; do
            if [[ "$file" == *.html ]]; then
              filtered_files+=("\"$file\"")
            fi
          done
          json_files=$(printf ",%s" "${filtered_files[@]}")
          json_files="[${json_files:1}]"  # JSON配列形式に変換
          echo "files=$json_files" >> $GITHUB_ENV

      - name: Run Lighthouse for changed files
        if: env.files != '[]'
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: ./.github/config/.lighthouserc.json
          urls: ${{ fromJSON(env.files) }}
          budgetPath: ./.github/config/.budget.json
          temporaryPublicStorage: true
        continue-on-error: true

      - name: Comment on PR with Lighthouse results
        id: format_lighthouse_score
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const urls = ${{ steps.lighthouse_audit.outputs.links }};
            const assertions = ${{ steps.lighthouse_audit.outputs.assertionResults }};
            const manifest = ${{ steps.lighthouse_audit.outputs.manifest }};

            console.log(urls);
            console.log(assertions);
            console.log(manifest);

            const scoreData = [];
            for (const item of manifest) {
              const urlKey = item.url;
              const deviceType = item.isDesktop ? 'Desktop' : 'Mobile';
              const reportUrl = urls[urlKey];
              const parsedUrl = new URL(urlKey);
              const fileName = parsedUrl.pathname === '/' ? 'index.html' : parsedUrl.pathname.split('/').pop();

              if (item.summary) {
                const performance = Math.round(item.summary.performance * 100);
                const accessibility = Math.round(item.summary.accessibility * 100);
                const bestPractices = Math.round(item.summary['best-practices'] * 100);
                const seo = Math.round(item.summary.seo * 100);

                scoreData.push({ fileName, device: deviceType, performance, accessibility, bestPractices, seo, reportUrl });
              }
            }

            let markdownTable = '## 🔍 Lighthouse 監査結果\n\n';
            markdownTable += '| File name | Device | Performance | Accessibility | Best Practices | SEO | Report URL |\n';
            markdownTable += '| --------- | ------ | ----------- | ------------- | -------------- | --- | ---------- |\n';

            for (const data of scoreData) {
              const getEmojiForScore = (score) => {
                if (score === undefined || score === null) return '⚪️';
                if (score >= 90) return '🟢';
                if (score >= 50) return '🟠';
                return '🔴';
              };

              markdownTable += `| ${data.fileName} | ${data.device} | ${getEmojiForScore(data.performance)} ${data.performance} | ${getEmojiForScore(data.accessibility)} ${data.accessibility} | ${getEmojiForScore(data.bestPractices)} ${data.bestPractices} | ${getEmojiForScore(data.seo)} ${data.seo} | [詳細](${data.reportUrl}) |\n`;
            }

            markdownTable += '\n### スコア評価\n';
            markdownTable += '- 🟢 90-100: 良好\n';
            markdownTable += '- 🟠 50-89: 改善推奨\n';
            markdownTable += '- 🔴 0-49: 要修正\n';

            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: prNumber,
              body: markdownTable
            });

            console.log('Lighthouse監査結果をPRにコメントしました');
