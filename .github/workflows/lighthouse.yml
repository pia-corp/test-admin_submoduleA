name: Lighthouse Audit

on:
  pull_request:
    branches:
      - main
    types: [opened, edited, reopened, synchronize]

jobs:
  lighthouse-audit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: npm install -g lighthouse jq

      - name: Start local server
        run: |
          npx serve public -l 8080 &
          echo $! > .server-pid
          sleep 5

      - name: Run Lighthouse
        run: |
          mkdir -p lighthouse-results
          URLS=("http://localhost:8080/index.html" "http://localhost:8080/about.html") # 必要に応じてURLを追加
          for url in "${URLS[@]}"; do
            BASENAME=$(basename "$url")
            lighthouse "$url" --quiet --chrome-flags="--headless" --output=json --output-path="lighthouse-results/$BASENAME.json"
          done

      - name: Generate Summary
        run: |
          REPORTS_DIR="lighthouse-results"
          JSON_FILES=$(find $REPORTS_DIR -name "*.json")

          echo "| File name | Performance | Accessibility | Best practices | SEO |" > summary.md
          echo "| --------- | ----------- | ------------- | -------------- | --- |" >> summary.md

          for file in $JSON_FILES; do
            RELATIVE_PATH=$(basename "$file" .json)
            PERFORMANCE=$(jq '.categories.performance.score * 100' "$file")
            ACCESSIBILITY=$(jq '.categories.accessibility.score * 100' "$file")
            BEST_PRACTICES=$(jq '.categories."best-practices".score * 100' "$file")
            SEO=$(jq '.categories.seo.score * 100' "$file")

            echo "| $RELATIVE_PATH | $PERFORMANCE | $ACCESSIBILITY | $BEST_PRACTICES | $SEO |" >> summary.md
          done

      - name: Post Lighthouse report to PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr comment ${{ github.event.pull_request.number }} --body "$(cat summary.md)"

      - name: Stop local server
        if: always()
        run: |
          if [ -f .server-pid ]; then
            kill $(cat .server-pid) || true
          fi
